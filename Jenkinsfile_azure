pipeline {
  agent {
    kubernetes {
      label 'petclinic-cd'
      yamlFile 'jenkins-agent-pod.yaml'
    }
  }
    
    environment {
    GIT_COMMIT_SHORT = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
    APP_IMAGE = null
    IMAGE_REPO = 'repo-spring-petclinic-rest'
    IMAGE_NAME = 'spring-petclinic-rest'
    IMAGE_TAG = sh(returnStdout: true, script: '(git rev-parse --short HEAD && echo "_$BUILD_NUMBER") | tr -d "\n"').trim()
    REGISTRY_URL = 'https://devops03.koreacentral.cloudapp.azure.com'
    REGISTRY_CREDENTIALS = 'credential_harbor'
    ArgoURL='20.200.241.185'
    argocdAppPrefix='azure-helm-petclinic'
    appWaitTimeout = 60
    }

    stages {
      stage('Build') {
          steps {
            container('maven') {
              sh 'mvn clean compile'
            }
          }
        }
      stage('Unit Test') {
          steps {
            container('maven') {
              sh 'mvn test'
            }
          }
          post {
            always {
              junit 'target/surefire-reports/*.xml'
              step([ $class: 'JacocoPublisher' ])
            }
          }
        }
       stage('Static Code Analysis') {
          steps {
            configFileProvider([configFile(fileId: 'maven-settings', variable: 'MAVEN_SETTINGS')]) {
              container('maven') {
                sh 'mvn sonar:sonar -s $MAVEN_SETTINGS'
              }
            }
          }
        }
      
      stage('Package') {
      steps {
        container('maven') {
          sh 'mvn clean package -DskipTests'
          archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
        }
      }
    }
    stage('Build Docker image') {
      steps {
        container('docker') {
          script {
            APP_IMAGE = docker.build("${IMAGE_REPO}/${IMAGE_NAME}:${IMAGE_TAG}")
          }
        }
      }
    }

stage('Push Docker image') {
      steps {
        container('docker') {
          script {
            docker.withRegistry('http://' + REGISTRY_URL, REGISTRY_CREDENTIALS) {
              APP_IMAGE.push()
              APP_IMAGE.push('latest')
            }
          }
        }
      }
    }

stage('Update manifest') {
    
      steps {
        sh """
          git config --global user.name 'skccdevops03'
          git config --global user.email 'skcc.devops03@sk.com'
          git config --global credential.helper cache
          git config --global push.default simple
        """
        git url: 'https://github.com/skccdevops03/azure-helm-petclinic.git', credentialsId: 'credential_git', branch: 'main'
        sh """
          sed -i 's/tag:.*/tag: "${IMAGE_TAG}"/g' values.yaml
          git add values.yaml
          git commit -m 'Update Docker image tag: ${IMAGE_TAG}'
          git push origin main
        """
      }
    }
    
    stage('Argo'){
       steps {
       withCredentials([usernamePassword(credentialsId: 'credentials_argo', usernameVariable: 'ARGOCD_USER', passwordVariable: 'ARGOCD_PWD')]) {
        container('argocd') {
                sh """
                yes | argocd login --insecure ${ArgoURL} --username ${ARGOCD_USER} --password ${ARGOCD_PWD}
                argocd app sync ${argocdAppPrefix}
                argocd app wait ${argocdAppPrefix} --timeout ${appWaitTimeout}
                argocd logout ${ArgoURL}
                sleep 10
                """
          }
       }
       }
     }
      
      
    }   
 }

pipeline {
  agent none

  environment {
     REGISTRY_URL = 'https://kktdevops.koreacentral.cloudapp.azure.com'
      REGISTRY_CREDENTIALS = 'credentials_harbor'
      APP_IMAGE = null
      IMAGE_REPO = 'repo-spring-petclinic-rest'
      IMAGE_NAME = 'spring-petclinic-rest'
      IMAGE_TAG = "TEST_${BUILD_NUMBER}"
      APP_URL='http://azure-helm-petclinic.koreacentral.cloudapp.azure.com/petclinic/swagger-ui.html'
      APP_PORT=80
      PerfURL='azure-helm-petclinic.koreacentral.cloudapp.azure.com/petclinic/swagger-ui.html'    
      ArgoURL='20.200.241.185'
      argocdAppPrefix='azure-helm-petclinic'
      appWaitTimeout = 60
  }

  stages {

    stage('Build') {
      agent {
        kubernetes {
          label 'petclinic-cd'
          yamlFile 'jenkins-agent-pod.yaml'
        }
      }
      steps {
        container('maven') {
          sh 'mvn clean compile'
        }
      }
    }

    stage('Unit Test') {
      agent {
        kubernetes {
          label 'petclinic-cd'
          yamlFile 'jenkins-agent-pod.yaml'
        }
      }
      steps {
        container('maven') {
          sh 'mvn test'
        }
      }
      post {
        always {
          junit 'target/surefire-reports/*.xml'
          step([ $class: 'JacocoPublisher' ])
        }
      }
    }

    stage('Static Code Analysis') {
      agent any
      steps {
        configFileProvider([configFile(fileId: 'maven-settings', variable: 'MAVEN_SETTINGS')]) {
          sh './mvnw sonar:sonar -s $MAVEN_SETTINGS'
        }
      }
    }
/*
    stage('Static Code Analysis') {
      agent {
        kubernetes {
          label 'petclinic-cd'
          yamlFile 'jenkins-agent-pod.yaml'
        }
      }
      steps {
        configFileProvider([configFile(fileId: 'maven-settings', variable: 'MAVEN_SETTINGS')]) {
          container('maven') {
            sh 'mvn sonar:sonar -s $MAVEN_SETTINGS'
          }
        }
      }
    }
*/
    stage('Package') {
      agent {
        kubernetes {
          label 'petclinic-cd'
          yamlFile 'jenkins-agent-pod.yaml'
        }
      }
      steps {
        container('maven') {
          sh 'mvn clean package -DskipTests'
          archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
        }
      }
    }

  stage('Build Docker image') {
      agent any
      steps {
        script {
          APP_IMAGE = docker.build("${IMAGE_REPO}/${IMAGE_NAME}:${IMAGE_TAG}")
        }
      }
    }

    stage('Push Docker image') {
      agent any
      steps {
        script {
          docker.withRegistry(REGISTRY_URL, REGISTRY_CREDENTIALS) {
            APP_IMAGE.push()
            APP_IMAGE.push('latest')
          }
        }
      }
    }
    
     stage('Update manifest') {
      agent any
    
      steps {
        sh """
          git config --global user.name 'skccdevops03'
          git config --global user.email 'skcc.devops03@sk.com'
          git config --global credential.helper cache
          git config --global push.default simple
        """
        git url: 'https://github.com/skccdevops03/petclinic-argocd-helm.git', credentialsId: 'git_skccdevops03', branch: 'main'
        sh """
          sed -i 's/tag:.*/tag: "${IMAGE_TAG}"/g' values.yaml
          git add values.yaml
          git commit -m 'Update Docker image tag: ${IMAGE_TAG}'
          git push origin main
        """
      }
    }

  }  /* stages */
}  /* pipeline */
